tree grammar VSLTreeParser;

options {
  language     = Java;
  tokenVocab   = VSLParser;
  ASTLabelType = CommonTree;
}

s [SymbolTable symTab] returns [Code3a code]
  : e=statement[symTab] { code = e.code; }
  ;

expression [SymbolTable symTab] returns [ExpAttribute expAtt]
  : ^(PLUS e1=expression[symTab] e2=expression[symTab]) 
    { 
      Type ty = TypeCheck.checkBinOp(e1.type, e2.type);
      VarSymbol temp = SymbDistrib.newTemp();
      Code3a cod = Code3aGenerator.genBinOp(Inst3a.TAC.ADD, e1, e2, temp);
      expAtt = new ExpAttribute(ty, cod, temp);
    }
  | ^(MINUS e1=expression[symTab] e2=expression[symTab]) 
    { 
      Type ty = TypeCheck.checkBinOp(e1.type, e2.type);
      VarSymbol temp = SymbDistrib.newTemp();
      Code3a cod = Code3aGenerator.genBinOp(Inst3a.TAC.SUB, e1, e2, temp);
      expAtt = new ExpAttribute(ty, cod, temp);
    }
  | ^(MUL e1=expression[symTab] e2=expression[symTab]) 
    { 
      Type ty = TypeCheck.checkBinOp(e1.type, e2.type);
      VarSymbol temp = SymbDistrib.newTemp();
      Code3a cod = Code3aGenerator.genBinOp(Inst3a.TAC.MUL, e1, e2, temp);
      expAtt = new ExpAttribute(ty, cod, temp);
    }
  | ^(DIV e1=expression[symTab] e2=expression[symTab]) 
    { 
      Type ty = TypeCheck.checkBinOp(e1.type, e2.type);
      VarSymbol temp = SymbDistrib.newTemp();
      Code3a cod = Code3aGenerator.genBinOp(Inst3a.TAC.DIV, e1, e2, temp);
      expAtt = new ExpAttribute(ty, cod, temp);
    }
  | pe=primary_exp[symTab] 
    { expAtt = pe; }
  ;
  
statement [SymbolTable symTab] returns [ExpAttribute expAtt]
  : ^(ASSIGN_KW e=expression[symTab] IDENT) 
    { 
      Type ty = e.type;
      Operand3a id = symTab.lookup($IDENT.text);
      Code3a cod = Code3aGenerator.genBinOp(Inst3a.TAC.COPY, e, e, id);
      expAtt = new ExpAttribute(ty, cod, id);
    }
  ;



block [SymbolTable symTab] returns [ExpAttribute expAtt]
    : ^(BLOCK d=declaration[symTab] inst_list)
     {
       SymbolTable tabBlock = new SymbolTable();
       tabBlock.enterScope()
       d.
     }
    | ^(BLOCK inst_list)
      {
        
      }
    ; 

declaration
    : (INT_KW decl_list)+  ->  ^(DECL decl_list+)
    ;
 
decl_list
    : decl_item (COM! decl_item)*
    ;

decl_item [SymbolTable symTab] returns [ExpAttribute expAtt]
    : ^IDENT
     {
       
    | IDENT LB INTEGER RB -> ^(ARDECL IDENT INTEGER)

    ;

 	  
  
primary_exp [SymbolTable symTab] returns [ExpAttribute expAtt]
  : INTEGER
    {
      ConstSymbol cs = new ConstSymbol(Integer.parseInt($INTEGER.text));
      expAtt = new ExpAttribute(Type.INT, new Code3a(), cs);
    }
  | IDENT
    {
      Operand3a id = symTab.lookup($IDENT.text);
      expAtt = new ExpAttribute(id.type, new Code3a(), symTab.lookup($IDENT.text));
    }
  ;
